/*
游游有两个整数n,k，他希望构造一个排列p，要求p的最长上升子序列的长度为k，并且p是全部满足要求的排列中字典序最小的。
长度为n的排列是由1~n这n个整数、按任意顺序组成的数组，每个整数恰好出现一次。例如，{2,3,1,5,4}是一个排列，但{1,2,2}不是一个排列(数组中的2出现了两次),{1,3,4}也不是一个排列(长度为 3但数组中有 4)。最长上升子序列是一个序列中最长的严格单调递增的子序列，而子序列为从原字符串中删除任意数量（可以为零、可以为全部）的字符所得到的新字符串。例如:{1,3,4,2,5}的最长上升子序列为 ${1,3,4,5}$ ,其长度为 4。从第一个数字开始，逐个元素比较直到找到第一个不同的数字，通过比较这个数字的大小决定序列的大小，称为字典序。例如 ${1,2,4,3}$ 字典序大于 ${1,2,3,4}$ ,字典序 ${2,1,3,4}$ 大于{1,4,3,2}。
*/

package main

import (
	"fmt"
)

func main() {
	var n, k int
	fmt.Scan(&n, &k)
	result := help(n, k)
	fmt.Print(result)
}

func help(n, k int) []int {
	p := make([]int, 0)
	for i := 0; i < n; i++ {
		p = append(p, i+1)
	}
	if k == 1 {
		return p
	}

	for i := 0; i < n-k+1; i++ {
		p[i] = i + 1
	}
	for i := n - k + 1; i < n; i++ {
		p[i] = n - (i - (n - k + 1))
	}
	return p
}
